=========================================
# modify procPrintSubjectList()
=========================================
create or replace procedure procPrintSubjectList(
    pCourseNum number,          -- 입력받은 과정번호
    pResult1 out sys_refcursor,  --반환값으로 커서를 사용할 때 사용하는 자료형
    pResult2 out sys_refcursor
)
is
begin
    open pResult1
        -- 입력받은 과정번호와 일치하는 과목 리스트 
        for 
        select name  from tblallcourse where num = pCourseNum;

    open pResult2
        for
        select sc.num snumbycourse, s.name subjectname from tblsubjectbycourse sc inner join tblallcourse a on sc.allcoursenum = a.num inner join tblsubject s on sc.subjectnum = s.num where allcoursenum = pCourseNum;
end;

=========================================
# create view
=========================================
create or replace view vwopencourseinfo2
as
select o.num as opencoursenum,a.name as opencoursename,o.startDate || '~' || o.endDate as "period",c.name as "classroomname"
   ,decode((select distinct allCourseNum from tblSubjectByCourse where a.num = allCourseNum),null,'X','O')  as "register opening course"
   , (select count(*) from tblcourseHistory h where h.openCourseNum = o.num and h.status = '수강중' and h.deletestatus <> 1) as "trainee registration personnel"
from tblopenCourse o
    inner join  tblallCourse a
        on o.allCourseNum = a.num
             inner join tblclassRoom c
                 on o.classRoomNum = c.num
                    where o.status <> 1 and a.deletestatus <> 1'

=========================================
# mod procedure
=========================================
create or replace procedure procPrintSjInfoPeriodBySubject(
    pnum number, -- 시행과목번호
    presult1 out sys_refcursor,
    presult2 out sys_refcursor
)
is
begin
    open presult1 for
    -- 개설 과정 정보(과정명, 과정기간(시작 년월일, 끝 년월일), 강의실)와 과목명, 과목기간(시작 년월일, 끝 년월일), 교재명, 교사명
    select distinct ac.name as ocName, oc.startdate as startdate, oc.enddate as enddate, oc.classroomnum as classroomnum, tc.name as teachername
    from 
    tblperiodBySubject pbs inner join tblopenCourse oc 
        on pbs.opencoursenum = oc.num inner join tblallcourse ac
            on oc.allcoursenum = ac.num inner join tblsubject s
                on pbs.subjectbycoursenum = s.num inner join tblteacher tc
                    on oc.teachernum = tc.num inner join tblbook b
                        on s.num = b.num
    where opencoursenum = pnum;
    
    open presult2 for
    select  s.name as subjectname,  pbs.startdate as startdate, pbs.enddate as enddate, b.name as bookname
    from 
    tblperiodBySubject pbs inner join tblopenCourse oc 
        on pbs.opencoursenum = oc.num inner join tblallcourse ac
            on oc.allcoursenum = ac.num inner join tblsubject s
                on pbs.subjectbycoursenum = s.num inner join tblteacher tc
                    on oc.teachernum = tc.num inner join tblbook b
                        on s.num = b.num
    where opencoursenum = pnum;
end;


=========================================
# mod procedure
=========================================
create or replace procedure procEnrollperiodBySubject(
    pCourseNum number,          -- 입력받은 과정번호
    pSubjectNum number,         -- 입력받은 과목번호
    pStartdate Date,            -- 입력받은 시작년월일
    pEnddate Date               -- 입력받은 종료년월일
)
is
begin
    -- 입력받은 과정에 과목 추가
    insert into TBLPERIODBYSUBJECT (num, opencoursenum, SUBJECTBYCOURSENUM, STARTDATE, ENDDATE) values (PERIODBYSUBJECTSEQ.nextval,pCourseNum,pSubjectNum, pStartdate,pEnddate);
end;

=========================================
# create procedure
=========================================
create or replace procedure procPrintSjListofOpencourse(
    pOpencoursenum number,
    pResult out SYS_REFCURSOR
    )
is
begin
    open pResult for

   select sbc.num as num, s.name as name, s.essentialtype as type, sbc.seq as seq
    from tblsubjectbycourse sbc inner join tblsubject s on sbc.subjectnum = s.num
    where allcoursenum = (select allcoursenum from tblopencourse where num = pOpencoursenum) and s.deletestatus = 0
    order by sbc.seq;
end;


===============================
procPrintSjInfoPeriodBySubject
===============================
create or replace procedure procPrintSjInfoPeriodBySubject(
    pnum number, -- 시행과목번호
    presult1 out sys_refcursor,
    presult2 out sys_refcursor
)
is
begin
    open presult1 for
    -- 개설 과정 정보(과정명, 과정기간(시작 년월일, 끝 년월일), 강의실)와 과목명, 과목기간(시작 년월일, 끝 년월일), 교재명, 교사명
    select distinct ac.name as ocName, oc.startdate as startdate, oc.enddate as enddate, oc.classroomnum as classroomnum, tc.name as teachername
    from 
    tblperiodBySubject pbs inner join tblopenCourse oc 
        on pbs.opencoursenum = oc.num inner join tblallcourse ac
            on oc.allcoursenum = ac.num inner join tblsubject s
                on pbs.subjectbycoursenum = s.num inner join tblteacher tc
                    on oc.teachernum = tc.num inner join tblbook b
                        on s.num = b.num
    where opencoursenum = pnum;

    open presult2 for
    select  pbs.num as subjectnum, s.name as subjectname,  pbs.startdate as startdate, pbs.enddate as enddate, b.name as bookname
    from 
    tblperiodBySubject pbs inner join tblopenCourse oc 
        on pbs.opencoursenum = oc.num inner join tblallcourse ac
            on oc.allcoursenum = ac.num inner join tblsubject s
                on pbs.subjectbycoursenum = s.num inner join tblteacher tc
                    on oc.teachernum = tc.num inner join tblbook b
                        on s.num = b.num
    where opencoursenum = pnum;
end;


===============================
procPrintEndSubjectList2
===============================
create or replace procedure procPrintEndSubjectList2(
    pOpencoursenum number,
    pResult out SYS_REFCURSOR
)
is
begin
    open presult for
    select ch.num as coursehistorynum, std.name as studentname, std.tel as tel, ch.status as status
    from tblcoursehistory ch inner join tblstudent std on ch.studentnum = std.num 
    where opencoursenum = pOpencoursenum;
end;

============================================
/*** project_test_tblopenCourseManagement_admin ***/
select * from tblopenCourse;
/*특정 개설 과정 선택시 개설 과정에 등록된 개설 과목 정보(과목명, 과목기간(시작 년월일, 끝 년월일), 교재명, 교사명) 및 
등록된 교육생 정보(교육생 이름, 주민번호 뒷자리, 전화번호, 등록일, 수료 및 중도탈락)을 확인할 수 있어야 한다.*/
--select 
-- vwopenCourseSubject()
select * from tblopenCourse;
select * from tblcoursehistory;

delete tblopenCourse where num = 65;
drop view vwopenCourseSubject;

-- 뷰 추가
create or replace view vwopenCourseName
as
select o.num as openCourseNum, a.name as courseName from tblopenCourse o
    inner join tblAllCourse a
        on o.allCourseNum = a.num 
            where o.status <> 1 and a.deletestatus <> 1
                order by o.num;

create or replace view vwopenCourseSubject
as
select o.num,s.name as "subjectname",p.startDate || '~' || p.endDate as "Subject duration", b.name as "textbook name", t.name as "teacher name", st.name as "student name",substr(st.ssn,8) as "ssn",
st.tel as "tel",st.registerDate as "registration date",c.status as "completion status" from tblopenCourse o 
    inner join tblperiodBySubject p
        on p.openCourseNum = o.num
            inner join tblSubjectByCourse sc
                on sc.num = p.subjectByCourseNum
                    inner join tblSubject s
                        on s.num = sc.subjectNum
                            inner join tblBook b
                                on b.subjectNum = s.num
                                    inner join tblteacher t
                                    on t.num = o.teacherNum
                                        inner join tblcourseHistory c
                                           on c.openCourseNum = o.num
                                            inner join tblstudent st
                                                on st.num = c.studentnum
                                                    where o.status <> 1 and s.deletestatus <> 1 and t.deletestatus <> 1 and c.deletestatus <> 1 and st.deletestatus <> 1
                                                        order by o.num;

/*개설 과정 정보 출력시 개설 과정명, 개설 과정기간(시작 년월일, 끝 년월일), 강의실명, 개설 과목 등록 여부, 교육생 등록 인원을 출력한다.*/
--select 
-- vwopenCourseInfo()
create or replace view vwopenCourseInfo 
as
select o.num as "openCourseNum",a.name as "opening course name",o.startDate || '~' || o.endDate as "opening course period",c.name as "classroom name"
   ,decode((select distinct allCourseNum from tblSubjectByCourse where a.num = allCourseNum),null,'X','O')  as "register opening course"
   , (select count(*) from tblcourseHistory h where h.openCourseNum = o.num and h.status = '수강중' and h.deletestatus <> 1) as "trainee registration personnel"
from tblopenCourse o
    inner join  tblallCourse a
        on o.allCourseNum = a.num
             inner join tblclassRoom c
                 on o.classRoomNum = c.num
                    where o.status <> 1 and a.deletestatus <> 1
                        order by o.num; -- 조인을 했을때와 상관쿼리를 했을 때 미묘하게 달라 불필요하게 많으면 상관서브쿼리를 쓰는게 맞아
select * from vwopenCourseInfo;
/*과정 정보는 과정명, 과정기간(시작 년월일, 끝 년월일), 강의실 정보를 입력한다.*/
-- insert
-- procopenCourse()

select * from tblallCourse;
select * from tblopenCourse;
select * from tblopenCourse;

create or replace procedure procopenCourse(

    pstartDate varchar2,
    pendDate varchar2,
    pclassRoomNum tblopenCourse.classRoomNum%type,
    pallCourseNum tblopenCourse.allCourseNum%type
  
)
is
begin
    insert into tblopencourse(num,startDate,endDate,classRoomNum,allCourseNum,status) values(OPENCOURSESEQ.nextval,to_date(pstartDate,'yyyymmdd'),to_date(pendDate,'yyyymmdd'),pclassRoomNum,pallCourseNum,default);

end procopenCourse;

create or replace view vwclassRoom 
as 
select num as "classRoomNum", name as "classRoomName", capacity from tblclassroom where deletestatus <> 1 order by num;

create or replace view vwallCourse1 
as
select num as allCourseNum,name as courseName,capacity,period as coursePeriod from tblallCourse order by num;

-- 과정 정보 입력 부분
--insert

        
/*개설 과정 정보에 대한 입력, 출력, 수정, 삭제 기능을 사용할 수 있어야 한다.*/ 
-- insert,update,delete,select
-- 입력 insert
-- procopenCourseInsert()

-- pclassRoomNum하고 pteacherNum,pallCourseNum 보여줘야 될 듯 
-- tblclassRoom,tblopenCourse,tblallCourse
---- 넣을 수 있는 강의실 번호를 보여줌
select * from tblopenCourse;
select * from tblallCourse;
create or replace procedure procopenCourseInsert(

    pstartDate varchar2,
    pendDate varchar2,
    pclassRoomNum tblopenCourse.classRoomNum%type,
    pteacherNum tblopenCourse.teacherNum%type,
    pallCourseNum tblopenCourse.allCourseNum%type


)
is 
begin
    insert into tblopenCourse values(openCourseseq.nextVal,to_date(pstartDate,'yyyymmdd'),to_date(pendDate,'yyyymmdd'),pclassRoomNum,pteacherNum,pallCourseNum,default);

end procopenCourseInsert;

--추가
create or replace view vwteacher
as 
select t.num as teacherNum, s.name "availablesubjectName" from tblteacher t
    inner join tblavailablesubject a
        on t.num = a.teachernum
            inner join tblSubject s
                on s.num = a.subjectnum
                      where t.deletestatus <> 1 and s.deletestatus <> 1
                            order by teacherNum;

create or replace view vwallCourse
as
select a.num as "allCourseNum", a.name as "courseName", sc.period as "subjectPeriod", s.name as "subjectName",capacity, a.period as "coursePeriod" from tblallCourse a
    inner join tblsubjectbycourse sc
        on sc.allcoursenum = a.num
            inner join tblSubject s
                on s.num = sc.subjectnum
                    where a.deletestatus <> 1 and s.deletestatus <> 1 order by a.num,sc.period;

select * from tblallCourse;

-- 수정 시작
-- 시작날짜 수정(기존의 원래 가지고 있는걸 10개를 다 고치는 프로시저 나이만 고치면 나머지를 알아야 돼 나이만 새로운값)
-- update 하나 프로시저 모든 컬럼을 수정할 수 있어야 한다. 매개변수 10개 select 를 날려서 
-- select * from tblInsa where num = 1001;
-- update tblInsa set
-- 모든 정보를 수정하는 
-- num = 1001
-- name = '수정값'
-- ssn = 4564654-54616
-- ...
-- sudang = 20000
-- where num = ?
-- 자바 procUpdate('','','',..)

--select * from tblopenCourse num = 번호;
--select * from tblopenCourse where num = pnum; -- 커서 반환하는 프로시저, 매개변수 하나 pnum 

-- procopenCourseUpdate()
-- select,update
-- drop 해야 될 듯 vwopenCourseSelect

/*
drop view vwopenCourseSelect;
create or replace view vwopenCourseSelect
as 
select o.num as "openCourseNum", a.name as "openCourse name" from tblopenCourse o   
    inner join tblallCourse a
        on a.num = o.allCourseNum
            where o.status <> 1
                order by o.num;
*/       

create or replace procedure procopenCourseSelect(
    pnum tblopenCourse.num%type,
    presult out sys_refcursor
)
is
begin
    open presult for 
        select * from tblopenCourse where num = pnum and status <> 1;
end procopenCourseSelect;

select * from tblopenCourse;
commit;
create or replace procedure procopenCourseUpdate(
    pnum tblopenCourse.num%type,
    pstartDate varchar2,
    pendDate varchar2,
    pclassRoomNum tblopenCourse.classRoomNum%type,
    pteacherNum tblopenCourse.teacherNum%type,
    pallCourseNum tblopenCourse.allCourseNum%type

)
is 
begin 
    update tblopenCourse set startDate = to_date(pstartDate,'yyyymmdd'), endDate = to_date(pendDate,'yyyymmdd'), classRoomNum = pclassRoomNum, teacherNum = pteacherNum, allCourseNum = pallCourseNum, status = default where num = pnum;
    
end procopenCourseUpdate;

desc tblteacher;
desc tblopencourse;
-- 삭제 
-- procopenCourseDelete()
--update

create or replace procedure procopenCourseDelete(
    pnum tblopenCourse.num%type
)
is 
begin
  
   -- 상태값을 줘서 삭제된 얘인거를 표시를 해
   update tblopenCourse set status = 1 where num = pnum; 

end procopenCourseDelete;

select * from tblopenCourse;
rollback;

select * from tblopenCourse;
alter table tblopenCourse Add(status number(1));
alter table tblopenCourse Modify(status default 0 not null);
desc tblopencourse;

--update tblopenCourse set status = default where num = 12;

select * from tblopenCourse;

--출력
-- vwopenCourse()
--select 
create or replace view vwopenCourse
as 
select * from tblopenCourse where status <> 1 order by num;


/*특정 개설 과정이 수료한 경우 등록된 교육생 전체에 대해서 수료날짜를 지정할 수 있어야 한다. 단, 중도 탈락자는 제외한다. */
--update
-- vwopenCourseSelectEndDate()
create or replace view vwopenCourseSelectEndDate
as
select h.num as "courseHistoryNum", h.openCourseNum, h.status, s.name as "student name", h.endDate from tblcourseHistory h 
    inner join tblstudent s
        on s.num = h.studentnum
            where h.status = '수료' and h.deletestatus <> 1 and s.deleteStatus <> 1 order by h.num;

create or replace procedure procstudentEndDate(
    pendDate varchar2,
    pcourseHistoryNum tblcourseHistory.num%type
)
is 
begin
    update tblcourseHistory set enddate = to_date(pendDate,'yyyymmdd') where status = '수료' and status <> '중도탈락' and num = pcourseHistoryNum and deletestatus <> 1;

end procstudentEndDate;




/*강의실 정보는 기초 정보 강의실명에서 선택적으로 추가할 수 있어야 한다.*/ 
-- 개강하는 반에 6개 강의 중에 선택할 수 있는가? 강의실이 비워져 있을 때 선택, select가 필요 모든 강의실 비워있는 강의실만 보여주고
-- 이중에 어느 강의실로 할지 선택, 강의실이 안 정해져 있을 때, 기간도 봐야 돼, pnum PK , 강의실 번호 프로시저
-- 만들었고 확인만 하면 돼 
-- procBasicClassroom()
--select,update
select * from tblopenCourse;
select * from vwopenCourseInfo;
select * from tblcourseHistory;
select * from tblopenCourse;
insert into tblopenCourse values(40,'20/07/05','21/02/01',null,null,14,default);
commit;
create or replace view vwopenCourseClassRoom
as 
select o.num as "opening course number", o.startDate as "startDate", o.endDate as "endDate", o.classRoomNum as "classRoomNum" from tblopenCourse o
            where not sysdate between o.startDate and o.endDate and o.classRoomNum is null and o.status <> 1;

create or replace procedure procBasicClassroom(
    pnum tblopenCourse.num%type,
    pclassRoomNum tblopenCourse.classRoomNum%type
)
is 
begin
   
   update tblopenCourse set classRoomNum = pclassRoomNum where num = pnum and status <> 1;

end procBasicClassroom;


select * from tblopenCourse;

============================================
/*** project_test_tblattendanceManagement_teacher.java ***/

/*교사가 강의한 과정에 한해 선택하는 경우 모든 교육생의 출결을 조회할 수 있어야 한다.*/
-- procteacherAttendance(teacherNum)
-- 지금 현재
select * from tbladmin;
select * from tblcourseHistory order by num; --num 312개
select * from tblattendance where status = '조퇴' order by num ; --num이 10개
select * from tblopenCourse;
select * from tblteacher;
select * from tblallCourse;
select * from tblstudent;
desc tblattendance; 
desc tblcourseHistory;

create or replace view vwteacherAttendance
as 
select o.num as "openCourseNum",o.allCourseNum,(select name from tblallCourse where o.allCourseNum = num) as "subject name",t.name as "teacher name", o.teacherNum from tblopenCourse o
        inner join tblteacher t
            on o.teacherNum = t.num 
               where o.status <> 1 and t.deletestatus <> 1
                 order by allCourseNum ; 

create or replace PROCEDURE procteacherAttendance(
    pnum tblopenCourse.num%type,
    pteacherNum tblopenCourse.teacherNum%type,
    presult out sys_refcursor
)
is
begin
open presult for 
  select o.num as "openCourseNum",s.name as "studentName", t.name "teacherName", o.startDate || '~' || o.endDate as "coursePeriod", h.status as "courseStatus", a.status as "attendanceStatus", to_char(a.enterTime,'yyyy-mm-dd hh24:mi:ss') as "enterTime",
  to_char(a.outTime,'yyyy-mm-dd hh24:mi:ss') as "outTime", o.allCourseNum, o.teacherNum
     from tblstudent s
        inner join tblcourseHistory h
            on h.studentNum = s.num
             inner join tblattendance a 
                 on a.courseHistoryNum = h.num
                    inner join tblopenCourse o
                        on h.openCourseNum = o.num
                            inner join tblteacher t
                                on t.num = o.teacherNum
                                     where o.num = pnum and o.teacherNum = pteacherNum and o.status <> 1 and h.status <> '수료' and s.deletestatus <> 1 and h.deletestatus <> 1
                                        and t.deletestatus <> 1;
                                          
end procteacherAttendance;

--select * from tblattendance a
--        inner join tblcourseHistory h
--             on h.num = a.courseHistoryNum ;

/*출결 현황을 기간별(년, 월, 일) 조회할 수 있어야 한다.*/
-- procteacherAttendance1()
select * from tblattendance;
select * from tblCourseHistory;
select* from tblopencourse;
select * from tblstudent;
-- 년 
create or replace PROCEDURE procteacherAttendance1(
    presult out sys_refcursor,
    pyear varchar2,
    pteacherNum number
)
is
begin
open presult for 
    select h.opencoursenum, s.name as "student name", o.teacherNum, to_char(a.enterTime,'yyyy-mm-dd hh24:mi:ss') as "enterTime", to_char(a.outTime,'yyyy-mm-dd hh24:mi:ss') as "outTime", a.status as "attendance status",h.status as "course status" 
        from tblattendance a
            inner join tblcourseHistory h
                on h.studentNum = a.num 
                    inner join tblstudent s
                        on s.num = h.studentnum
                            inner join tblopenCourse o
                                on o.num = h.opencoursenum
                                     where to_char(a.enterTime,'yyyy') = 2019 and s.deleteStatus <> 1 and h.status <> '수료' and h.deletestatus <> 1 and o.teacherNum = pteacherNum and o.status <> 1
                                        order by to_char(a.enterTime,'mm'),to_char(a.enterTime,'dd'),a.num;
end procteacherAttendance1;

-- 월(년)

create or replace PROCEDURE procteacherAttendance2(
    presult out sys_refcursor,
    pmonth varchar2,
    pteacherNum number
)
is
begin
open presult for 
      select h.opencoursenum, s.name as "student name", to_char(a.enterTime,'yyyy-mm-dd hh24:mi:ss') as "enterTime", to_char(a.outTime,'yyyy-mm-dd hh24:mi:ss') as "outTime", a.status as "attendance status",h.status as "course status" 
        from tblattendance a
            inner join tblcourseHistory h
                on h.studentNum = a.num 
                    inner join tblstudent s
                        on s.num = h.studentnum
                         inner join tblopenCourse o
                                on o.num = h.opencoursenum
                                     where to_char(a.enterTime,'mm') = pmonth and s.deleteStatus <> 1 and h.status <> '수료' and h.deletestatus <> 1 and o.status <> 1 and o.teacherNum = pteacherNum
                                        order by to_char(a.enterTime,'yyyy'),to_char(a.enterTime,'dd'),a.num;
end procteacherAttendance2;


--일(년,월)
create or replace PROCEDURE procteacherAttendance3(
    presult out sys_refcursor,
    pday varchar2,
    pteacherNum number
)
is
begin
open presult for 
       select h.opencoursenum, s.name as "student name", to_char(a.enterTime,'yyyy-mm-dd hh24:mi:ss') as "enterTime", to_char(a.outTime,'yyyy-mm-dd hh24:mi:ss') as "outTime", a.status as "attendance status",h.status as "course status" 
        from tblattendance a
            inner join tblcourseHistory h
                on h.studentNum = a.num 
                    inner join tblstudent s
                        on s.num = h.studentnum
                             inner join tblopenCourse o
                                    on o.num = h.opencoursenum
                                         where to_char(a.enterTime,'dd') = pday and s.deleteStatus <> 1 and h.status <> '수료' and h.deletestatus <> 1 and o.status <> 1 and o.teacherNum = pteacherNum
                                            order by to_char(a.enterTime,'yy'),to_char(a.enterTime,'mm'),a.num;
end procteacherAttendance3;


/*특정(특정 과정, 특정 인원 -> 학생 이름) 출결 현황을 조회할 수 있어야 한다.*/ 
-- procteacherAttendanceSelect()
select * from tblcourseHistory;


create or replace view vwcourseHistory
as 
select s.name as "student name",s.num as "student num",h.openCourseNum, o.teacherNum from tblstudent s
    inner join tblcourseHistory h
        on s.num = h.studentNum
            inner join tblopenCourse o
                on o.num = h.openCourseNum
                     where h.status <> '수료' and s.deletestatus <> 1 and h.deletestatus <> 1 and o.status <> 1
                         order by s.name,h.openCourseNum;
                         
select * from tblattendance;
select * from tblcoursehistory;
create or replace PROCEDURE procteacherAttendanceSelect(
    presult out sys_refcursor,
    pnum tblopenCourse.num%type,
    pstudentNum tblcourseHistory.studentNum%type,
    pteacherNum number
)
is
begin
open presult for
    select o.num, o.startDate || '~' || o.endDate as "course period", (select name from tblallCourse where num = o.allCourseNum and o.status <> 1) as "course name", to_char(a.entertime,'yyyy-mm-dd hh24:mi:ss') as "enterTime",
    to_char(a.outtime,'yyyy-mm-dd hh24:mi:ss') as "outTime", s.name as "student name"
    from tblopenCourse o
        inner join tblcourseHistory h
            on o.num = h.openCourseNum
                inner join tblattendance a
                    on a.courseHistoryNum = h.num
                        inner join tblstudent s
                            on s.num = h.studentNum
                                where o.num = pnum and h.studentNum = pstudentNum and o.status <> 1 and h.deletestatus <> 1 and s.deletestatus <> 1 and h.status <> '수료' and o.teacherNum = pteacherNum;
end procteacherAttendanceSelect;
select * from tblopenCourse;    

--select o.num, o.startDate || '~' || o.endDate as "course period", (select name from tblallCourse where num = o.allCourseNum and o.status <> 1) as "course name", to_char(a.entertime,'yyyy-mm-dd hh24:mi:ss') as "enterTime",
--    to_char(a.outtime,'yyyy-mm-dd hh24:mi:ss') as "outTime", s.name as "student name",o.teacherNum
--    from tblopenCourse o
--        inner join tblcourseHistory h
--            on o.num = h.openCourseNum
--                inner join tblattendance a
--                    on a.courseHistoryNum = h.num
--                        inner join tblstudent s
--                            on s.num = h.studentNum
--                                where o.status <> 1 and h.deletestatus <> 1 and s.deletestatus <> 1 and h.status <> '수료';
/*모든 출결 조회는 근태 상황을 구분할 수 있어야 한다.(정상, 지각, 조퇴(enter time이 나왔지만 outTime이 일찍), 외출, 병가(결석), 기타)*/
-- 년,월 동시에 받아서 정렬
-- 트리거로 자바에서 => 관리자
-- procteacherAttendanceStatus()
select * from tblcoursehistory order by num; --h: 16 o:1
select * from tblattendance;
select * from tblopenCourse;
create or replace procedure procteacherAttendanceStatus(
     presult out sys_refcursor,
     pyear varchar2,
     pmonth varchar2,
     pteacherNum number
   
)
is
begin   
open presult for 
    select s.name as "studentName",a.enterTime as "enterTime", a.outTime as "outTime",a.status as "attendanceStatus", h.opencoursenum as "openCourseNum" from tblattendance a
               inner join tblcourseHistory h
                            on h.num = a.courseHistoryNum 
                                 inner join tblstudent s
                                       on s.num = h.studentNum
                                            inner join tblopenCourse o
                                                on o.num = h.openCourseNum
                                                    where h.status <> '수료' and s.deletestatus <> 1 and h.deletestatus <> 1 and to_char(a.enterTime,'yyyy') = pyear and to_char(a.enterTime,'mm') = pmonth and o.teacherNum = pteacherNum and o.status <> 1;
end procteacherAttendanceStatus;

/*
select s.name as "student name",a.enterTime as "enterTime", a.outTime as "outTime",a.status as "attendance status", h.opencoursenum as "openCourseNum", o.teacherNum from tblattendance a
               inner join tblcourseHistory h
                            on h.num = a.courseHistoryNum 
                                 inner join tblstudent s
                                       on s.num = h.studentNum
                                            inner join tblopenCourse o
                                                on o.num = h.openCourseNum
                                                    where h.status <> '수료' and s.deletestatus <> 1 and h.deletestatus <> 1 and o.status <> 1 and  o.teacherNum = 1;
*/

select * from tblattendance;

=============================================/*관리자는 수료생의 고용보험 여부를 조회 후 그 결과를 입력할 수 있다.*/

/*** project_test_tblhiredGraduates_Select.java ***/

-- 만약에 컬럼명이 as 할때 의미랑 같으면 꼭 as 해서 별칭을 붙일 필요는 없을까 함수 알아보기 어려운것만 함
-- prochiredGraduatesUpdate()
select * from tblhiredgraduates;


create or replace view vwhiredGraduatesSelect
as
select a.*, decode(status,'재직중','O','X') as "employment insurance", (select o.teacherNum from tblcourseHistory h
                                                                                    inner join tblopenCourse o
                                                                                      on o.num = h.openCourseNum
                                                                                            where a.courseHistoryNum = h.num and h.deletestatus <> 1 and o.status <> 1) as "teacherNum" from tblhiredGraduates a order by num;

create or replace PROCEDURE prochiredGraduatesUpdate(
    pnum tblhiredGraduates.num%type
)
is
begin
    update tblhiredgraduates set status = '재직중' where num = pnum;
end prochiredGraduatesUpdate;

/*추가적으로 회사이름과 연봉을 기입할 수 있다.(선택적)*/
-- prochiredGraduatesUpdate1()

select * from tblhiredgraduates;

create or replace view vwallCourse
as
select num as allCourseNum,name as courseName from tblallCourse  where deletestatus <> 1 order by num;

create or replace procedure prochiredGraduatesUpdateSelect(
    pnum tblhiredGraduates.num%type,
    presult out sys_refcursor
)
is
begin
    open presult for
        select * from tblhiredGraduates where num = pnum;
end prochiredGraduatesUpdateSelect;

create or replace procedure prochiredGraduatesUpdate1(
    pnum tblhiredGraduates.num%type,
    pcourseHistoryNum tblhiredGraduates.courseHistoryNum%type,
    pcompany tblhiredGraduates.company%type,
    psalary tblhiredGraduates.salary%type,
    pstatus tblhiredGraduates.status%type
)
is
begin
   update tblhiredgraduates set courseHistoryNum = pcourseHistoryNum,company = pcompany, salary = psalary,status = pstatus where num = pnum;
end prochiredGraduatesUpdate1;

/*관리자는 취업 완료 수료생 리스트 조회 시 연봉별 검색이 가능하다. */
-- prochiredgradesSalarySelect()
select * from tblhiredgraduates; 

create or replace PROCEDURE prochiredgradesSalarySelect(
    pstart number,
    pend number,
    presult out sys_refcursor
)
is
begin
     open presult for 
            select coursehistorynum,company,salary,status 
                            from tblhiredGraduates where salary between pstart and pend order by salary,coursehistorynum;
end prochiredgradesSalarySelect;

/*관리자가 취업 완료 수료생 관리를 할 수 있다. (추가,삭제,출력) */
-- 출력
-- vwhiredGradesManSelect()
select * from tblhiredgraduates;
create or replace view vwhiredGradesManSelect
as select num,courseHistoryNum,company,salary,status from tblhiredGraduates order by num;

-- 추가
-- prochiredGradesManInsert()
select * from tblhiredGraduates;
create or replace procedure prochiredGradesManInsert(
    pcourseHistoryNum tblhiredGraduates.courseHistorynum%type,
    pcompany tblhiredGraduates.company%type,
    psalary tblhiredGraduates.salary%type,
    pstatus tblhiredGraduates.status%type
)
is
begin
    insert into tblhiredGraduates values(hiredGraduatesseq.nextVal,pcourseHistoryNum,pcompany,psalary,pstatus);
end prochiredGradesManInsert;

--삭제 
-- prochiredGradesManDelete()
select * from tblhiredgraduates;
create or replace procedure prochiredGradesManDelete(
    pnum tblhiredGraduates.num%type
) 
is
begin
    delete tblhiredGraduates where num = pnum;
end prochiredGradesManDelete;

 /*관리자는 회사명으로 조회 가능*/
--prochiredGradesSelectName()
create or replace procedure prochiredGradesSelectName(
    pcompany tblhiredGraduates.company%type,
    presult out sys_refcursor
)
is
begin
    open presult for
        select * from tblhiredGraduates where replace(upper(company),' ','') like replace('%' || upper(pcompany) || '%',' ','');
end prochiredGradesSelectName;
